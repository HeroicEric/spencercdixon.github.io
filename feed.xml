<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spencer Dixon</title>
  <subtitle>A blog about code</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-10-01T14:07:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Image Preview With Carrierwave And Rails</title>
    <link rel="alternate" href="http://blog.url.com/blog/image-preview-with-carrierwave-and-rails.html"/>
    <id>http://blog.url.com/blog/image-preview-with-carrierwave-and-rails.html</id>
    <published>2015-10-01T14:07:00-04:00</published>
    <updated>2015-10-01T14:16:26-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this assumes you already have carrierwave up and running.  For help
with that see the documentation on the
&lt;a href="https://github.com/carrierwaveuploader/carrierwave"&gt;carrierwave&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;The other day I implemented image preview using Carrierwave and I couldn&amp;#39;t seem
to find any great tutorials/blog posts on how to do it.  Wanted to post how to
do it in case someone else was interesting in doing image preview with
carrierwave.&lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# ... rest of the form ...

# Your carrierwave image uploader
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"img_prev"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;300&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;300&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"your image"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-thumbnail hidden"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-default btn-file"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Upload Avatar Image&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;file_field&lt;/span&gt; &lt;span class="ss"&gt;:avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="s2"&gt;"avatar-upload"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hidden_field&lt;/span&gt; &lt;span class="ss"&gt;:avatar_cache&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the javascript that will create an event handler on change for the file
uploading input tag and display the image on the screen.  I applied some basic
bootstrap classes to the previewed image to make it look nicer.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;readURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#img_prev'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#avatar-upload"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#img_prev'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hidden'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;readURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more neat Rails Tips &amp;amp; Tricks &lt;a href="https://github.com/SpencerCDixon/Rails-tricks"&gt;check out my repo on github.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Object Oriented Twitter</title>
    <link rel="alternate" href="http://blog.url.com/blog/object-oriented-twitter.html"/>
    <id>http://blog.url.com/blog/object-oriented-twitter.html</id>
    <published>2015-08-27T00:29:00-04:00</published>
    <updated>2015-09-08T19:40:25-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Slide deck from my talk at Launch Academy.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://www.slideshare.net/slideshow/embed_code/key/NKw2NSUfBlPqMx" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/secret/NKw2NSUfBlPqMx" title="Object Oriented Twitter Slidedeck" target="_blank"&gt;Object Oriented Twitter Slidedeck&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/SpencerDixon2" target="_blank"&gt;Spencer Dixon&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sustainable Software: The Small Things Matter</title>
    <link rel="alternate" href="http://blog.url.com/blog/sustainable-software-the-small-things-matter.html"/>
    <id>http://blog.url.com/blog/sustainable-software-the-small-things-matter.html</id>
    <published>2015-08-18T16:45:00-04:00</published>
    <updated>2015-09-08T19:40:25-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Sustainable software is the difference between happy productive developers and
disheartened developers with less hair and a LinkedIn thread with a recruiter.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The idea of sustainability has been an omnipresent theme throughout my life.  It
really started to take root in high school when I started my first
company &lt;a href="http://www.greatlakesaquaponics.com"&gt;Great Lakes Aquaponics&lt;/a&gt; with my
father.  The idea of aquaponics is to create a mini sustainable
eco-system to grow plants and fish at the same time.  Pure harmony.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aquaponics refers to any system that combines conventional aquaculture 
(raising aquatic animals such as snails, fish, 
crayfish or prawns in tanks) with hydroponics (cultivating plants in water) 
in a symbiotic environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a salesperson, sustainability meant building strong
relationships with my clients.  Not just doing a demonstration to make a sale
but to make a friend and hopefully a client for life.  It was about going the
extra mile and doing what was unexpected of me.  Spending the time to prep and
do the little things that would allow me to connect with people on a deeper
level.&lt;/p&gt;

&lt;p&gt;My sales career got me super into personal growth.  Devouring books for a few
years straight made me realize the importance of sustainable choices.  One thing I 
quickly started to learn was that sustainable choices are difficult to maintain.&lt;/p&gt;

&lt;h2&gt;The hard truth is: sustainability can be hard.&lt;/h2&gt;

&lt;p&gt;It requires patience.&lt;br&gt;
It requires discipline.&lt;br&gt;
It requires long-term thinking.&lt;br&gt;
It requires creative thinking.&lt;br&gt;
It requires &lt;strong&gt;purpose&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sustainable choices often require us to go against traditional thinking.  They
force us to divorce the idea of short term gratification for the less
destructive alternative.  They drain resources from our finite tank of daily
willpower.  &lt;/p&gt;

&lt;h2&gt;So what does all this have to do with software?&lt;/h2&gt;

&lt;p&gt;Six months teaching software development to beginners at &lt;a href="https://www.launchacademy.com/"&gt;Launch
Academy&lt;/a&gt; and one thing I noticed is how
difficult it is for beginners to make sustainable choices.  It makes perfect
sense.  Their growth feeds off that instant gratification of results.  When I
was in their shoes I was just as guilty.  I had that hacker mentality of 
&lt;strong&gt;get it done as quickly as possible&lt;/strong&gt; instead of &lt;strong&gt;do it right&lt;/strong&gt;
to prevent headaches in the future.  I was missing context.  Context that is
almost impossible to comprehend until it happens to you.  I was unable to see
the bigger picture and therefore approached coding with an unsustainable mindset.&lt;/p&gt;

&lt;h2&gt;What is sustainable software?&lt;/h2&gt;

&lt;p&gt;Sustainable software comes from a mindset in how you approach software
development.  It&amp;#39;s comprised of many small idioms and practices.  Some of which
include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; taking time to name variables and classes well&lt;br&gt;&lt;/li&gt;
&lt;li&gt; properly formatting your code using the community style guide&lt;br&gt;&lt;/li&gt;
&lt;li&gt; avoiding comments where more expressive code is required&lt;br&gt;&lt;/li&gt;
&lt;li&gt; writing unit/acceptance tests&lt;br&gt;&lt;/li&gt;
&lt;li&gt; refactoring when your classes get too big&lt;br&gt;&lt;/li&gt;
&lt;li&gt; following Single Responsibility Principle&lt;br&gt;&lt;/li&gt;
&lt;li&gt; not violating Law of Demeter&lt;br&gt;&lt;/li&gt;
&lt;li&gt; staying DRY&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list could go on and on.  For more ways in which to write sustainable
software just read &lt;a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Clean Code&lt;/a&gt;
by Robert Martin (AKA Uncle Bob).  &lt;/p&gt;

&lt;p&gt;These small practices make up the whole of your code base.  Most of them are easy to
do but also easy not to do.  The mindset required to write sustainable software
requires that you do these things; always.  Let one method slide and soon it cascades
throughout the system.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Neglect is like an infection. Left 
unchecked it will spread throughout our 
entire system of disciplines and eventually lead to a complete breakdown...
 - Jim Rohn&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How you do anything is how you do everything.  When you start to care about the
extra white space in a file or the missing tabs, your software organically starts
to become more sustainable.  It&amp;#39;s a complete paradigm shift.  From just doing the
minimum required in order to finish your current story to writing beautiful
code you can be proud of.&lt;/p&gt;

&lt;h2&gt;Find the broken windows&lt;/h2&gt;

&lt;p&gt;Malcom Gladwell in &lt;em&gt;The Tipping Point&lt;/em&gt; talks about the broken window theory.
During the 90&amp;#39;s in NYC there was a flux of crime.  In order to reduce crime
police officers started becoming way stricter with little things like broken
windows, boarded up doors, and vandalism.  As the small crimes were reduced the
bigger crimes also saw a drastic reduction.  &lt;/p&gt;

&lt;p&gt;Every time you let something small slide in your code base a seed is planted for
the next developer.  A seed that grows into more neglect, into more
miscommunication, and results in 1000 line long controller actions or &lt;code&gt;Classes&lt;/code&gt;.
It results in unsustainable software that makes the next developer want to pull
their hair out when working on it.&lt;/p&gt;

&lt;p&gt;Find the broken windows in your code base.  Be a good citizen and start fixing
them up one line at a time.&lt;/p&gt;

&lt;h2&gt;Create a more sustainable future&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re all human and nobodies perfect.  There is no such thing as a perfect code
base.  However, a sustainable mindset is about taking pride in your work.  Care
about the small things and commit to approaching software development with a sustainable mindset from here on out.&lt;/p&gt;

&lt;p&gt;Software developers are artists of the 21st century.  Painters take care of
their brushes, musicians take care of their instruments, it only makes sense
that we should take just as good care of our code bases.  &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Converting Octopress To Middleman With Vim Macros</title>
    <link rel="alternate" href="http://blog.url.com/blog/converting-octopress-to-middleman-with-vim-macros.html"/>
    <id>http://blog.url.com/blog/converting-octopress-to-middleman-with-vim-macros.html</id>
    <published>2015-08-16T16:41:00-04:00</published>
    <updated>2015-09-08T19:40:25-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Converting from Octopress to Middleman was one of the best decisions I&amp;#39;ve ever
made.  I finally found a blogging platform that integrates seamlessly into my
everyday workflow as a Rails developer.  One thing I wasn&amp;#39;t looking forward to
though was converting all my old Octopress posts into the proper Middleman format.
Thank god for Vim macros.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A Vim macro defined by &lt;a href="http://vim.wikia.com/wiki/Macros"&gt;their wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Recording a macro is a great way to perform a one-time task, 
 or to get things done quickly when you don&amp;#39;t want to mess with Vim script or 
 mappings, or if you do not yet know how to do it more elegantly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, a macro is just a sequence of vim commands you record and then 
reapply somewhere else.  If you&amp;#39;re familiar with the &lt;code&gt;.&lt;/code&gt; vim command, it&amp;#39;s just
the period command on steroids.&lt;/p&gt;

&lt;h2&gt;Front Matter Before And After&lt;/h2&gt;

&lt;p&gt;Here is an example of what the original Octopress YAML front matter looked like:  &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="ss"&gt;layout: &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"Gosu Tutorial"&lt;/span&gt;
&lt;span class="ss"&gt;date: &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0800&lt;/span&gt;
&lt;span class="ss"&gt;comments: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="ss"&gt;categories: &lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gosu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tutorials&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what I needed the front matter to look like for Middleman:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="no"&gt;Gosu&lt;/span&gt; &lt;span class="no"&gt;Tutorial&lt;/span&gt;
&lt;span class="ss"&gt;date: &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; 
&lt;span class="ss"&gt;tags: &lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gosu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tutorials&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see they&amp;#39;re very similar.  After removing a few lines, getting rid of
some quotes, and re-naming categories to tags it should be good to go for
Middleman.&lt;/p&gt;

&lt;h2&gt;Creating The Macro&lt;/h2&gt;

&lt;p&gt;To start recording a macro you press &lt;code&gt;q&lt;/code&gt; and then any other letter you want to
bind that macro to.  For this example I&amp;#39;m going to use &lt;code&gt;r&lt;/code&gt; for replace.&lt;/p&gt;

&lt;p&gt;Here are all the steps of the macro annotated for clarity:  &lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;qr   # &lt;span class="k"&gt;start&lt;/span&gt; recording macro with cursor &lt;span class="k"&gt;on&lt;/span&gt; line one  
&lt;span class="k"&gt;j&lt;/span&gt;    # move down &lt;span class="k"&gt;a&lt;/span&gt; line &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s1"&gt;'layout: post'&lt;/span&gt;  
dd   # delete that line since I don'&lt;span class="k"&gt;t&lt;/span&gt; need it   
&lt;span class="k"&gt;f&lt;/span&gt;"   # &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; the &lt;span class="k"&gt;first&lt;/span&gt; double&lt;span class="p"&gt;-&lt;/span&gt;quotes  
&lt;span class="k"&gt;x&lt;/span&gt;    # delete the double quote  
&lt;span class="k"&gt;f&lt;/span&gt;"   # &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; the next double quote  
&lt;span class="k"&gt;x&lt;/span&gt;    # delete it  
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;   # move down &lt;span class="k"&gt;to&lt;/span&gt; the &lt;span class="s1"&gt;'comments: true'&lt;/span&gt; line  
dd   # delete it  
&lt;span class="k"&gt;j&lt;/span&gt;    # move down &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s1"&gt;'categories'&lt;/span&gt; line  
&lt;span class="k"&gt;cw&lt;/span&gt;   # change word &lt;span class="s1"&gt;'categories'&lt;/span&gt;  
&lt;span class="k"&gt;tags&lt;/span&gt; # type out &lt;span class="k"&gt;tags&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; be used by Middleman  
esc  # &lt;span class="k"&gt;exit&lt;/span&gt; insert &lt;span class="k"&gt;mode&lt;/span&gt;  
&lt;span class="k"&gt;q&lt;/span&gt;    # stop the recording  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our macro built we can apply it to any files that need to be
converted by typing &lt;code&gt;@r&lt;/code&gt;.  Two letters to change 5-6 lines of text into the
exact format we need.  That is strategic laziness at its finest! &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating a DSL in Ruby</title>
    <link rel="alternate" href="http://blog.url.com/blog/creating-dsl.html"/>
    <id>http://blog.url.com/blog/creating-dsl.html</id>
    <published>2015-06-30T20:00:00-04:00</published>
    <updated>2015-09-08T19:40:25-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Recently I built a small DSL for work that allows users to sync data to MongoDB
from any external API.  It was my first time making a DSL so I decided to
document a few things that helped me get started:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4&gt;Using Ruby&amp;#39;s &lt;code&gt;included&lt;/code&gt; hook to extend class methods&lt;/h4&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CustomDsl&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;DslClassMethods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instance_method_here&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_class_method&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;DslClassMethods&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;class_method_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@_class_method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_class_method&lt;/span&gt;
    &lt;span class="vi"&gt;@_class_method_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now when the &lt;code&gt;CustomDsl&lt;/code&gt; gets included in one of my classes that uses the Dsl
it will also extend the &lt;code&gt;DslClassMethods&lt;/code&gt;.  Extending that module will make all
methods defined in it class methods instead of instance methods.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;CustomDsl&lt;/span&gt;

  &lt;span class="n"&gt;class_method_name&lt;/span&gt; &lt;span class="ss"&gt;:apple&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_method_here&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; :apple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is that the instance variable &lt;code&gt;@_class_method_name&lt;/code&gt; is
somewhat deceiving.  Since DslClassMethods is being extended it&amp;#39;s actually an instance
variable on the Class &lt;code&gt;Example&lt;/code&gt;, not a normal instance variable.&lt;/p&gt;

&lt;h4&gt;Usings macros for configuration&lt;/h4&gt;

&lt;p&gt;I ended up using class macros for a lot of configuration.  It was important to
me that end users of the DSL be informed of error messages if they had a typo or
were missing key components to make the DSL work.  For example, if a class was suppose to use a
specific Connection class to hit an API, I wanted to confirm that 
Connection class actually existed.  The implementation I choose to use involves
some simple metaprogramming and &lt;code&gt;Object.const_get&lt;/code&gt;. &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CustomDsl&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;DslClassMethods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="c1"&gt;# ... emitted ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;DslClassMethods&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;primary_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;confirm_symbol_or_string!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:capitalize&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
    &lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@_primary_connection&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;UndefinedConnectionClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; wants to use &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; as its primary connection but &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has not yet been defined"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;primary_connection&lt;/code&gt; is now able to take symbols or strings but it makes sure to
always save the connection as a symbol.  If &lt;code&gt;Object.const_get&lt;/code&gt; is unable to find
the connection class then I rescue the &lt;code&gt;NameError&lt;/code&gt; and provide a more
descriptive error message.  The final implementation for this macro might look
something like:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SlackDataSource&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;CustomDsl&lt;/span&gt;
  &lt;span class="n"&gt;primary_connection&lt;/span&gt; &lt;span class="ss"&gt;:slack_connection&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is really just the start but hopefully there is enough context for someone
interested in making their own DSL to have some direction.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Stages of Vim</title>
    <link rel="alternate" href="http://blog.url.com/blog/the-stages-of-vim.html"/>
    <id>http://blog.url.com/blog/the-stages-of-vim.html</id>
    <published>2015-01-24T19:00:00-05:00</published>
    <updated>2015-09-08T19:40:25-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So you&amp;#39;re finally fed up with alerts asking you to buy Sublime text or random errors with Atom?  Time to transition to the editor that has been around for over 30 years Vi Improved, also known as VIM. Getting started with VIM can be difficult so I decided to write a post on how I approached it.  The first thing to understand is learning VIM is NOT easy but once you do it you will never regret it.  Here are the stages of VIM:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Optimistic Hatred&lt;/h3&gt;

&lt;p&gt;At this point you see the value in learning VIM but the learning curve is making you hate it.  Every time you start to use it you get frustrated and just open a text editor your comfortable with.  The idea of using hjkl to move around makes you crazy.  Why would they do that!?  The best way to overcome this stage is to just go cold turkey.  Declare to the world that you will no longer ever use your old text editor.  It&amp;#39;s VIM or no programming.  The only way you are going to climb the wall is if you completely dedicate yourself and stop trying to learn it here and there when you have time. &lt;/p&gt;

&lt;h4&gt;Resources For Stage 1:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt; Vimtutor.  Enter your terminal and type &lt;code&gt;vimtutor&lt;/code&gt; + enter.  Follow that tutorial. Do it twice.&lt;/li&gt;
&lt;li&gt; &lt;a href="http://derekwyatt.org/vim/tutorials/novice/"&gt;Vim Novice Tutorials&lt;/a&gt; - Watch all these videos.  Take notes, pause the videos and try to do what is being taught.&lt;/li&gt;
&lt;li&gt; Get your VIM set up properly: &lt;a href="https://github.com/SpencerCDixon/dotfiles"&gt;Here are my dotfiles&lt;/a&gt;  Clone this repo down to your home directory (~) and then run ./install.sh to execute the script that will get you set up.&lt;/li&gt;
&lt;li&gt; &lt;a href="http://vim-adventures.com/"&gt;Vim Adventures&lt;/a&gt; - more practice with hjkl, fun when you&amp;#39;re bored of learning from other materials.&lt;/li&gt;
&lt;li&gt; Remap your capslock to be something useful: control. You will be hitting ctrl + c constantly in vim to switch modes.  Having caps lock as control can help with keyboard shortcuts outside of VIM as well. Ctrl + tab will cycle your tabs in chrome.&lt;/li&gt;
&lt;li&gt; The hardest thing to overcome in the beginning is just getting VIM set up properly.  Here are some of the MUST have plugins that I use: NerdTree, ctrlP, and vim-ruby&lt;/li&gt;
&lt;li&gt; Install the vimium plugin on chrome.  Now you can practice your vim everytime you search the internet! &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;Vimium download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more plugins you will want.  For now what&amp;#39;s important is you can access your file tree using NerdTree, you have a way to search through directories using ctrlP, and you have some ruby helpers.  Focus your attention on overcoming hjkl and learning basic commands like d, y, c, w, p, etc.&lt;/p&gt;
</content>
  </entry>
</feed>
